// Jake Zaia
// APCS2 pd1
// HW #26 -- The English Do Not Wait In Line
// 2017-03-28

/*****************************************************
 * class LLQueue
 * uses a linked list to implement a QUEUE
 * (a collection with FIFO property)
 *
 *          -----------------------------
 *   front |  --->   Q U E U E   --->    | end
 *          -----------------------------
 *
 ******************************************************/

//import java.util.NoSuchElementException;
//import java.lang.RuntimeException;

public class LLQueue<T> implements Queue<T> {

    private LLNode<T> _front, _end;

    // default constructor creates an empty queue
    public LLQueue() {
	_front = _end = null;
    }

    // means of adding a thing to the collection
    public void enqueue( T enQVal ) {
	if (_front == null){
	    _front = _end = new LLNode(enQVal, null);
	    return; }
	LLNode<T> newNode = new LLNode(enQVal, null);
	_end.setNext(newNode);
	_end = newNode;
    }//O(?)


    // means of removing a thing from the collection
    // remove and return thing at front of queue
    // assume _queue ! empty
    public T dequeue() { 
	T retVal = _front.getValue();
	_front = _front.getNext();
	return retVal;
    }//O(?)


    // means of peeking at thing next in line for removal
    public T peekFront() {
	return _front.getValue();
    }//O(?)


    public boolean isEmpty() {
	return _front == null;
    }//O(?)


    // print each node, separated by spaces
    public String toString() {
	String retStr = "";
	LLNode<T> currNode = _front;
	while (currNode != null) {
	    retStr += currNode.getValue() + " ";
	    currNode = currNode.getNext();
	}
	return retStr;
    }//O(?)



    public static void main( String[] args ) {

	
	Queue<String> LLQueuelJ = new LLQueue<String>();

	System.out.println("\nnow enqueuing thrice..."); 
	LLQueuelJ.enqueue("James");
	LLQueuelJ.enqueue("Todd");
	LLQueuelJ.enqueue("Smith");

	System.out.println("\nnow testing toString()..."); 
	System.out.println( LLQueuelJ ); //for testing toString()...

	System.out.println("\nnow dequeuing thrice..."); 
	System.out.println( LLQueuelJ.dequeue() );
	System.out.println( LLQueuelJ.dequeue() );
	System.out.println( LLQueuelJ.dequeue() );

	System.out.println("\nDequeuing from empty queue should yield error..."); 
	System.out.println( LLQueuelJ.dequeue() );
	

    }//end main

}//end class LLQueue
